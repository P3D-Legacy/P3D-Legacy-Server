using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace P3D.Legacy.Common.PacketGenerator
{
    [Generator]
    public class P3DPacketSourceGenerator : ISourceGenerator
    {
        private class P3DPacketFinder : ISyntaxReceiver
        {
            public List<RecordDeclarationSyntax> P3DPackets { get; private set; } = new();

            public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
            {
                if (syntaxNode is RecordDeclarationSyntax rds)
                {
                    /*
                    if (rds.Identifier.ValueText.Contains("BattleClientDataPacket"))
                    {
                        P3DPackets.Add(rds);
                    }
                    */

                    if (rds.BaseList?.Types.FirstOrDefault() is { } baseType && baseType.ToString().Contains("P3DPacket"))
                    {
                        P3DPackets.Add(rds);
                    }
                }
            }
        }

        public void Execute(GeneratorExecutionContext context)
        {
            var syntaxReceiver = (P3DPacketFinder?) context.SyntaxReceiver;
            foreach (var packet in syntaxReceiver?.P3DPackets ?? Enumerable.Empty<RecordDeclarationSyntax>())
            {
                var @namespace = "AutoGenerated";

                if (packet.Parent is NamespaceDeclarationSyntax nds)
                {
                    @namespace = nds.Name.ToString();
                }

                var members = packet.Members.Where(m => m.AttributeLists.SelectMany(a => a.Attributes).Any(a => a.Name.ToString() == "P3DPacketDataItemAttribute"))

                var sourceText = SourceText.From($@"
namespace {@namespace}
{{
    partial record {packet.Identifier.ValueText}
    {{
        public void WriteDataItems(IBufferWriter<byte> writer)
        {{
            // generated code
        }}
    }}
}}
", Encoding.UTF8);
                context.AddSource($"{packet.Identifier.ValueText}.g.cs", sourceText);
            }
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new P3DPacketFinder());
        }
    }
}
